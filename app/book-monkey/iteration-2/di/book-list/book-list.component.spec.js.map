{"version":3,"file":"book-list.component.spec.js","sourceRoot":"","sources":["../../../../../home/travis/build/Angular2Buch/book-monkey2/tmp/broccoli_type_script_compiler-input_base_path-a9c0JvAf.tmp/0/src/app/book-monkey/iteration-2/di/book-list/book-list.component.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wBAAiE,uBAAuB,CAAC,CAAA;AACzF,wBAAuD,2BAA2B,CAAC,CAAA;AACnF,qBAA0B,eAAe,CAAC,CAAA;AAC1C,iCAAmB,2BAA2B,CAAC,CAAA;AAE/C,oCAAkC,uBAAuB,CAAC,CAAA;AAC1D,mCAAiC,8BAA8B,CAAC,CAAA;AAEhE,QAAQ,CAAC,sCAAsC,EAAE;IAC/C,IAAI,OAA6B,CAAC;IAElC,UAAU,CAAC;QACT,sBAAY,CAAC,CAAC,qCAAgB,EAAE,uCAAiB,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAU,GAAyB;QAC3E,OAAO,GAAG,GAAG,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,6BAA6B,EAAE,gBAAM,CAAC,CAAC,uCAAiB,CAAC,EAAE,UAAC,SAA4B;QACzF,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,6BAA6B,EAAE,gBAAM,CAAC,EAAE,EAAE;QAC3C,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,+BAA+B,CAAC;aACxD,IAAI,CAAC,UAAC,OAA8B;YACnC,IAAI,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,SAAS,CAAC,uCAAiB,CAAC,CAAC,CAAC;YACxE,MAAM,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AASH;IAAA;IACA,CAAC;IARD;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,mCAET;YACD,UAAU,EAAE,CAAC,uCAAiB,CAAC;SAChC,CAAC;;uCAAA;IAEF,sCAAC;AAAD,CAAC,AADD,IACC","sourcesContent":["import { addProviders, async, inject, beforeEachProviders } from '@angular/core/testing';\nimport { ComponentFixture, TestComponentBuilder } from '@angular/compiler/testing';\nimport { Component } from '@angular/core';\nimport { By } from '@angular/platform-browser';\n\nimport { BookListComponent } from './book-list.component';\nimport { BookStoreService } from '../shared/book-store.service';\n\ndescribe('[iteration-2/di] Component: BookList', () => {\n  let builder: TestComponentBuilder;\n\n  beforeEach(() => {\n    addProviders([BookStoreService, BookListComponent]);\n  });\n\n  beforeEach(inject([TestComponentBuilder], function (tcb: TestComponentBuilder) {\n    builder = tcb;\n  }));\n\n  it('should inject the component', inject([BookListComponent], (component: BookListComponent) => {\n    expect(component).toBeTruthy();\n  }));\n\n  it('should create the component', inject([], () => {\n    return builder.createAsync(BookListComponentTestController)\n      .then((fixture: ComponentFixture<any>) => {\n        let query = fixture.debugElement.query(By.directive(BookListComponent));\n        expect(query).toBeTruthy();\n        expect(query.componentInstance).toBeTruthy();\n      });\n  }));\n});\n\n@Component({\n  selector: 'test',\n  template: `\n    <book-list></book-list>\n  `,\n  directives: [BookListComponent]\n})\nclass BookListComponentTestController {\n}\n"]}